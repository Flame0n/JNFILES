def restartDocker(){
    sh """
        systemctl status docker | grep 'Active:'
        sudo /usr/bin/pkill -f docker
        sudo /bin/systemctl restart docker
        docker system prune -a -f
        systemctl status docker | grep 'Active:'
    """
}

def executeCommand() {
    if (context.env.JOB_NAME.contains("cpu")) {
        def parameter = "run-cpu"
    } else if (context.env.JOB_NAME.contains("gpu_multi")) {
        def parameter = "run-gpu-multi"
    } else if (context.env.JOB_NAME.contains("gpu_single")) {
        def parameter = "run-gpu-single"
    } else if (context.env.JOB_NAME.contains("sanity")) {
        def parameter = "rocm-ci-sanity"
    }

    println("Build executed")
    if (parameter) {
        sh """
            tensorflow/tools/ci_build/ci_build.sh ROCM ./tensorflow/tools/ci_build/linux/rocm/${parameter}.sh
        """
    } else {
        throw e
    }
}

def executeStages(String repo="https://github.com/ROCmSoftwarePlatform/tensorflow-upstream/", String branch="develop-upstream", String credentialsId="Token"){
    node("rocm"){
        stage("Set up Docker"){
            restartDocker()
        }
        stage("Clone project"){
            checkout(
                [
                    $class: 'GitSCM',
                    userRemoteConfigs: [[url: repo, credentialsId:credentialsId]],
                    branches: [[name: branch]]
                ]
            )
        }
        stage("Build execution"){
            executeCommand()
        }
    }
}

def call() {
    try {
        
        executeStages()
        currentBuild.result = "SUCCESS"
        currentBuild.description = "<b>Success</b><br/>"
    } catch(e) {
        currentBuild.result = "FAILURE"
        currentBuild.description = "<b>Failed</b> when docker was executed<br/>"
    }
}

call()
