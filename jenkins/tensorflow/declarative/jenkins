import groovy.transform.Field

def executeCommand(String executionType) {
    println("he-he")
    sh """
        tensorflow/tools/ci_build/ci_build.sh ROCM ./tensorflow/tools/ci_build/linux/rocm/${executionType}.sh
    """
}

def checkoutProject(String repo, String branch){
    checkout(
        [
            $class: 'GitSCM',
            userRemoteConfigs: [[url: repo]],
            branches: [[name: branch]]
        ]
    )
}



pipeline {
    agent none
    options {
        timeout(time: 10, unit: 'HOURS')
        timestamps()
    }
    stages {
        stage('Run Tests') {
            parallel {
                stage("CPU") {
                    agent {
                        node { label 'rocm' }
                    }
                    steps {
                        script {
                            withChecks('CPU'){
                                checkoutProject(env.GIT_BRANCH, env.GIT_URL)
                                executeCommand("run_cpu")
                            }
                        }
                    }
                    post {
                        failure {
                            currentBuild.result = "FAILURE"
                        }
                        cleanup {
                            cleanWs()
                        }
                    }
                }
                stage("GPU-SINGLE") {
                    agent {
                        node { label 'rocm' }
                    }
                    steps {
                        script {
                            checkoutProject(env.GIT_BRANCH, env.GIT_URL)
                            executeCommand("run_gpu_single")
                        }
                    }
                    post {
                        failure {
                            currentBuild.result = "FAILURE"
                        }
                        cleanup {
                            cleanWs()
                        }
                    }
                }
                stage("GPU-MULTI") {
                    agent {
                        node { label 'rocm' }
                    }
                    steps {
                        script {
                            if (env.GIT_BRANCH.contains("r2.9")){
                                label += "&&multi_gpu"
                            }
                            checkoutProject(env.GIT_BRANCH, env.GIT_URL)
                            executeCommand("run_gpu_multi")
                        }
                    }
                    post {
                        failure {
                            currentBuild.result = "FAILURE"
                        }
                        cleanup {
                            cleanWs()
                        }
                    }
                }
                stage("SANITY") {
                    agent {
                        node { label 'rocm' }
                    }
                    steps {
                        script {
                            checkoutProject(env.GIT_BRANCH, env.GIT_URL)
                            executeCommand("rocm_ci_sanity")
                        }
                    }
                    post {
                        failure {
                            currentBuild.result = "FAILURE"
                        }
                        cleanup {
                            cleanWs()
                        }
                    }
                }
            }
        }
    }
    
}